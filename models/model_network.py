from tensorflow import keras as ks
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization

def build_model():
    model = ks.models.Sequential()
    input_layer = ks.Input(shape=(256,256,3))
    Conv2D = ks.layers.Conv2D(filters=112, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(input_layer)
    Conv2D = ks.layers.Conv2D(filters=112, kernel_size =(3,3), padding = "same", strides = (1,1),activation='relu')(Conv2D)
    MaxPooling2D_1 = ks.layers.MaxPool2D(pool_size=(2,2),strides=(2,2))(Conv2D)
    MaxPooling2D_1 = ks.layers.Conv2D(filters=224, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(MaxPooling2D_1)
    MaxPooling2D_1 = ks.layers.Conv2D(filters=224, kernel_size =(3,3), padding ="same",strides=(1,1),activation='relu')(MaxPooling2D_1)
    MaxPooling2D_2 = ks.layers.MaxPool2D(pool_size=(2,2),strides=(2,2))(MaxPooling2D_1)
    MaxPooling2D_2 = ks.layers.Conv2D(filters=448, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(MaxPooling2D_2)
    MaxPooling2D_2 = ks.layers.Conv2D(filters=448, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(MaxPooling2D_2)
    MaxPooling2D_3 = ks.layers.MaxPool2D(pool_size=(2,2),strides=(2,2))(MaxPooling2D_2)
    MaxPooling2D_3 = ks.layers.Conv2D(filters=448, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(MaxPooling2D_3)
    MaxPooling2D_3 = ks.layers.Conv2D(filters=448, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(MaxPooling2D_3)
    Deconv_3 = ks.layers.Conv2DTranspose(filters=448, kernel_size=(3,3), padding="same", strides=(2,2), activation="elu")(MaxPooling2D_3)
    Concatenate_3 = ks.layers.Concatenate(axis=1)([MaxPooling2D_2, Deconv_3])
    Dropout_3 = ks.layers.Dropout(0.2)(Concatenate_3)
    Conv2D_3 = ks.layers.Conv2D(filters=224, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Dropout_3)
    Conv2D_3 = ks.layers.Conv2D(filters=224, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Conv2D_3)
    Deconv_2 = ks.layers.Conv2DTranspose(filters=224, kernel_size=(3,3), padding="same", strides=(2,2), activation="elu")(Conv2D_3)
    Concatenate_2 = ks.layers.Concatenate(axis=1)([Deconv_2,MaxPooling2D_1])
    Dropout_2 = ks.layers.Dropout(0.2)(Concatenate_2)
    Conv2D_2 = ks.layers.Conv2D(filters=112, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Dropout_2)
    Conv2D_2 = ks.layers.Conv2D(filters=112, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Conv2D_2)
    Deconv_1 = ks.layers.Conv2DTranspose(filters=112, kernel_size=(3,3), padding="same", strides=(2,2), activation="elu")(Conv2D_2)
    Concatenate_1 =ks.layers.Concatenate(axis=1)([Deconv_1, Conv2D])
    Dropout_1 = ks.layers.Dropout(0.2)(Concatenate_1)
    Conv2D_1 = ks.layers.Conv2D(filters=112, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Dropout_1)
    Conv2D_1 = ks.layers.Conv2D(filters=112, kernel_size=(3,3), padding="same", strides=(1,1), activation="relu")(Dropout_1)
    output_layer = ks.layers.Conv2D(filters=151, kernel_size=(3,3), padding="same", strides=(1,1), activation="softmax")(Conv2D_1)
    model = ks.Model(inputs = input_layer,outputs = output_layer)
    model.compile (loss = "sparse_categorical_crossentropy",metrics = ["accuracy"])
    return model
